#write.csv(dfm_complete_df,"/Users/anna/Documents/uni/thesis/implementation/R/output/tf_complete.csv", row.names = TRUE)
### FOR C2022
# create dfm of lemmatized tokens, only keep compound words
#dfm_c2022 <- dfm(sp_c2022_tokens) %>% dfm_keep(pattern = compounds)
#dfm_c2022_tfidf <- dfm_tfidf(dfm_c2022) # compute tfidf scores
#top_c2022_norm <- normalize(topfeatures(dfm_c2022, n=300)) # normalize scores
dfm_c2022 <- dfm(sp_c2022_tokens) %>%
dfm_tfidf() %>%
dfm_keep(pattern = compounds)
c2022_tfidf <- normalize(topfeatures(dfm_c2022, n=300))
# dfm_keep(pattern = compounds)
#dfm_c2022_tfidf <- dfm_tfidf(dfm_c2022) # compute tfidf scores
#top_c2022_norm <- normalize(topfeatures(dfm_c2022, n=300))
# convert dfm into data frame
top_c2022_norm <- data.frame(Term = names(c2022_tfidf), Freq = c2022_tfidf, row.names = NULL) %>%
dplyr::arrange(desc(Freq))
### FOR P2022
# create dfm of lemmatized tokens, only keep compound words
#dfm_p2022 <- dfm(sp_p2022_tokens) %>% dfm_keep(pattern = compounds)
#dfm_p2022_tfidf <- dfm_tfidf(dfm_p2022) # compute tfidf scores
#top_p2022_norm <- normalize(topfeatures(dfm_p2022, n=300)) # normalize scores
dfm_p2022 <- dfm(sp_p2022_tokens) %>%
dfm_tfidf() %>%
dfm_keep(pattern = compounds)
p2022_tfidf <- normalize(topfeatures(dfm_p2022, n=300))
# convert dfm into data frame
top_p2022_norm <- data.frame(Term = names(p2022_tfidf), Freq = p2022_tfidf, row.names = NULL) %>%
dplyr::arrange(desc(Freq))
# change column names to be able to merge both data frames
colnames(top_p2022_norm)[2] <- "Freq_P2022"
colnames(top_c2022_norm)[2] <- "Freq_C2022"
# merge data frames
df_merge <- merge(top_c2022_norm,top_p2022_norm,by="Term", all.x = TRUE, all.y = TRUE)
# write to csv file
write.csv(df_merge,"/Users/anna/Documents/uni/thesis/implementation/R/output/tfidf_complete.csv", row.names = TRUE)
# retrieve frequency table of dfm
freqs_pro <- textstat_frequency(dfm_p2022, force=TRUE)
freqs_con <- textstat_frequency(dfm_c2022, force=TRUE)
# capitalize first letter of compound
freqs_pro$feature <- str_to_title(freqs_pro$feature)
freqs_con$feature <- str_to_title(freqs_con$feature)
# apply normalization
freqs_pro$normalize = round(normalize(freqs_pro$frequency),3)
freqs_con$normalize = round(normalize(freqs_con$frequency),3)
# plot comparison of both groups
freqs.act <- filter(freqs_pro) %>% as.data.frame() %>% select(feature, normalize)
freqs.scept <- filter(freqs_con) %>% as.data.frame() %>% select(feature, normalize)
freqs <- left_join(freqs.act, freqs.scept, by = "feature") %>% head(20) %>% arrange(normalize.x) %>% mutate(feature = factor(feature, feature))
# create plot
plot8 <- ggplot(freqs) +
geom_segment(aes(x=feature, xend=feature, y=normalize.x, yend=normalize.y), color="grey") +
geom_point(aes(x=feature, y=normalize.x, colour="Activists"), size = 3) +
geom_point(aes(x=feature, y=normalize.y, colour="Sceptics"), size = 3) +
ggtitle("Comparison 'Klima' TF-IDF Scores per Group") +
xlab("") + ylab("TF-IDF") +
coord_flip()
plot8+labs(colour="Group")
# save to png
#ggsave("/Users/anna/Documents/uni/thesis/plots/comparison_tfidf.png", dpi=300, dev='png', height=10, width=15, units="in")
# save to png
#ggsave("/Users/anna/Documents/uni/thesis/plots/comparison_tfidf.png", dpi=300, dev='png', height=10, width=15, units="in")
ggsave("/Users/anna/Documents/comparison_tfidf.png", dpi=300, dev='png', height=10, width=15, units="in")
# save to png
#ggsave("/Users/anna/Documents/uni/thesis/plots/comparison_tfidf.png", dpi=300, dev='png', height=10, width=15, units="in")
ggsave("/Users/anna/Documents/comparison_tfidf.png", dpi=300, dev='png', height=6, width=10, units="in")
# retrieve frequency table of dfm
freqs_pro <- textstat_frequency(dfm_p2022, force=TRUE)
freqs_con <- textstat_frequency(dfm_c2022, force=TRUE)
# capitalize first letter of compound
freqs_pro$feature <- str_to_title(freqs_pro$feature)
freqs_con$feature <- str_to_title(freqs_con$feature)
# apply normalization
freqs_pro$normalize = round(normalize(freqs_pro$frequency),3)
freqs_con$normalize = round(normalize(freqs_con$frequency),3)
# plot comparison of both groups
freqs.act <- filter(freqs_pro) %>% as.data.frame() %>% select(feature, normalize)
freqs.scept <- filter(freqs_con) %>% as.data.frame() %>% select(feature, normalize)
freqs <- left_join(freqs.act, freqs.scept, by = "feature") %>% head(20) %>% arrange(normalize.x) %>% mutate(feature = factor(feature, feature))
# create plot
plot8 <- ggplot(freqs) +
geom_segment(aes(x=feature, xend=feature, y=normalize.x, yend=normalize.y), color="grey") +
geom_point(aes(x=feature, y=normalize.x, colour="Activists"), size = 3) +
geom_point(aes(x=feature, y=normalize.y, colour="Skeptics"), size = 3) +
ggtitle("Comparison 'Klima' TF-IDF Scores per Group") +
xlab("") + ylab("TF-IDF") +
coord_flip()
plot8+labs(colour="Group")
# save to png
#ggsave("/Users/anna/Documents/uni/thesis/plots/comparison_tfidf.png", dpi=300, dev='png', height=10, width=15, units="in")
ggsave("/Users/anna/Documents/comparison_tfidf.png", dpi=300, dev='png', height=6, width=10, units="in")
# retrieve frequency table of dfm
freqs_pro <- textstat_frequency(dfm_p2022, force=TRUE)
freqs_con <- textstat_frequency(dfm_c2022, force=TRUE)
# capitalize first letter of compound
freqs_pro$feature <- str_to_title(freqs_pro$feature)
freqs_con$feature <- str_to_title(freqs_con$feature)
# apply normalization
freqs_pro$normalize = round(normalize(freqs_pro$frequency),3)
freqs_con$normalize = round(normalize(freqs_con$frequency),3)
# plot comparison of both groups
freqs.act <- filter(freqs_pro) %>% as.data.frame() %>% select(feature, normalize)
freqs.scept <- filter(freqs_con) %>% as.data.frame() %>% select(feature, normalize)
freqs <- left_join(freqs.act, freqs.scept, by = "feature") %>% head(20) %>% arrange(normalize.x) %>% mutate(feature = factor(feature, feature))
# create plot
plot8 <- ggplot(freqs) +
geom_segment(aes(x=feature, xend=feature, y=normalize.x, yend=normalize.y), color="grey") +
geom_point(aes(x=feature, y=normalize.x, colour="Activists"), size = 3) +
geom_point(aes(x=feature, y=normalize.y, colour="Skeptics"), size = 3) +
ggtitle("Comparison 'Klima' TF-IDF Scores per Subdiscourse") +
xlab("") + ylab("TF-IDF") +
coord_flip()
plot8+labs(colour="Group")
# save to png
#ggsave("/Users/anna/Documents/uni/thesis/plots/comparison_tfidf.png", dpi=300, dev='png', height=10, width=15, units="in")
ggsave("/Users/anna/Documents/comparison_tfidf.png", dpi=300, dev='png', height=6, width=10, units="in")
# retrieve frequency table of dfm
freqs_pro <- textstat_frequency(dfm_p2022, force=TRUE)
freqs_con <- textstat_frequency(dfm_c2022, force=TRUE)
# capitalize first letter of compound
freqs_pro$feature <- str_to_title(freqs_pro$feature)
freqs_con$feature <- str_to_title(freqs_con$feature)
# apply normalization
freqs_pro$normalize = round(normalize(freqs_pro$frequency),3)
freqs_con$normalize = round(normalize(freqs_con$frequency),3)
# plot comparison of both groups
freqs.act <- filter(freqs_pro) %>% as.data.frame() %>% select(feature, normalize)
freqs.scept <- filter(freqs_con) %>% as.data.frame() %>% select(feature, normalize)
freqs <- left_join(freqs.act, freqs.scept, by = "feature") %>% head(20) %>% arrange(normalize.x) %>% mutate(feature = factor(feature, feature))
# create plot
plot8 <- ggplot(freqs) +
geom_segment(aes(x=feature, xend=feature, y=normalize.x, yend=normalize.y), color="grey") +
geom_point(aes(x=feature, y=normalize.x, colour="Activists"), size = 3) +
geom_point(aes(x=feature, y=normalize.y, colour="Skeptics"), size = 3) +
ggtitle("Comparison TF-IDF Scores per Subdiscourse") +
xlab("") + ylab("TF-IDF") +
coord_flip()
plot8+labs(colour="Group")
# save to png
#ggsave("/Users/anna/Documents/uni/thesis/plots/comparison_tfidf.png", dpi=300, dev='png', height=10, width=15, units="in")
ggsave("/Users/anna/Documents/comparison_tfidf.png", dpi=300, dev='png', height=6, width=10, units="in")
# plot comparison of both groups
freqs.act <- filter(freqs_pro) %>% as.data.frame() %>% select(feature, normalize)
# retrieve frequency table of dfm
freqs_pro <- textstat_frequency(dfm_p2022, force=TRUE)
freqs_con <- textstat_frequency(dfm_c2022, force=TRUE)
# capitalize first letter of compound
freqs_pro$feature <- str_to_title(freqs_pro$feature)
freqs_con$feature <- str_to_title(freqs_con$feature)
# apply normalization
freqs_pro$normalize = round(normalize(freqs_pro$frequency),3)
freqs_con$normalize = round(normalize(freqs_con$frequency),3)
# plot comparison of both groups
freqs.act <- filter(freqs_pro) %>% as.data.frame() %>% select(feature, normalize)
freqs.scept <- filter(freqs_con) %>% as.data.frame() %>% select(feature, normalize)
freqs <- left_join(freqs.act, freqs.scept, by = "feature") %>% head(50) %>% arrange(normalize.x) %>% mutate(feature = factor(feature, feature))
# create plot
plot8 <- ggplot(freqs) +
geom_segment(aes(x=feature, xend=feature, y=normalize.x, yend=normalize.y), color="grey") +
geom_point(aes(x=feature, y=normalize.x, colour="Activists"), size = 3) +
geom_point(aes(x=feature, y=normalize.y, colour="Skeptics"), size = 3) +
ggtitle("Comparison TF-IDF Scores per Subdiscourse") +
xlab("") + ylab("TF-IDF") +
coord_flip()
plot8+labs(colour="Group")
# save to png
ggsave("/Users/anna/Documents/uni/thesis/plots/comparison_tfidf.png", dpi=300, dev='png', height=10, width=15, units="in")
sessionInfo()
# load corpus files
pro2022 = readRDS("corpora/pro2022.rds")
contra2022 = readRDS("corpora/contra2022.rds")
# load list of final climate change compounds
compounds <- scan("../Python/files/wordlist.txt", what="", sep="\n")
setwd("~/Documents/uni/glossar_final")
# load corpus files
pro2022 = readRDS("corpora/pro2022.rds")
contra2022 = readRDS("corpora/contra2022.rds")
# load list of final climate change compounds
compounds <- scan("../Python/files/wordlist.txt", what="", sep="\n")
# load corpus files
pro2022 = readRDS("corpora/pro2022.rds")
contra2022 = readRDS("corpora/contra2022.rds")
# load list of final climate change compounds
compounds <- scan("../../Python/files/wordlist.txt", what="", sep="\n")
# load list of final climate change compounds
compounds <- scan("../../Python/files/wordlist.txt", what="", sep="\n")
# intall necessary packages
#install.packages("quanteda")
#install.packages("readtext")
#install.packages("tidyverse")
#install.packages("quanteda.textstats")
#install.packages("quanteda.textplots")
#install.packages("data.table")
#install.packages("stringr")
#install.packages("spacyr")
#install.packages("textcat")
# load libraries
library(quanteda)
library(readtext)
library(tidyverse)
library(quanteda.textplots)
library(quanteda.textstats)
library(spacyr)
library(stringr)
library(data.table)
library(textcat)
spacy_initialize(model = "de_core_news_sm")
# load corpus files
pro2022 = readRDS("corpora/pro2022.rds")
contra2022 = readRDS("corpora/contra2022.rds")
# load list of final climate change compounds
compounds <- scan("../../Python/files/wordlist.txt", what="", sep="\n")
setwd("/Users/anna/Documents/uni/thesis/implementation/R/notebooks")
getwd
getwd()
# load corpus files
pro2022 = readRDS("corpora/pro2022.rds")
contra2022 = readRDS("corpora/contra2022.rds")
# load list of final climate change compounds
compounds <- scan("../../Python/files/wordlist.txt", what="", sep="\n")
# load corpus files
pro2022 = readRDS("corpora/pro2022.rds")
contra2022 = readRDS("corpora/contra2022.rds")
# load list of final climate change compounds
compounds <- scan("/../../Python/files/wordlist.txt", what="", sep="\n")
# load corpus files
pro2022 = readRDS("corpora/pro2022.rds")
contra2022 = readRDS("corpora/contra2022.rds")
# load list of final climate change compounds
compounds <- scan("../Python/files/wordlist.txt", what="", sep="\n")
# load corpus files
pro2022 = readRDS("corpora/pro2022.rds")
contra2022 = readRDS("corpora/contra2022.rds")
# load list of final climate change compounds
compounds <- scan("/../Python/files/wordlist.txt", what="", sep="\n")
setwd("../")
getwd()
setwd("/Users/anna/Documents/uni/thesis/")
getwd()
# load corpus files
pro2022 = readRDS("corpora/pro2022.rds")
contra2022 = readRDS("corpora/contra2022.rds")
# load list of final climate change compounds
compounds <- scan("/implementation/Python/files/wordlist.txt", what="", sep="\n")
# load corpus files
pro2022 = readRDS("corpora/pro2022.rds")
contra2022 = readRDS("corpora/contra2022.rds")
# load list of final climate change compounds
compounds <- scan("implementation/Python/files/wordlist.txt", what="", sep="\n")
# load corpus files
pro2022 = readRDS("corpora/pro2022.rds")
contra2022 = readRDS("corpora/contra2022.rds")
# load list of final climate change compounds
compounds <- scan("/Users/anna/Documents/uni/thesis/implementation/Python/files/wordlist.txt", what="", sep="\n")
# load list of final climate change compounds and word forms
compound_df <- read.csv("/implementation/Python/files/compounds_info.csv", sep = ";", stringsAsFactors=FALSE)
# load corpus files
pro2022 = readRDS("corpora/pro2022.rds")
contra2022 = readRDS("corpora/contra2022.rds")
# load list of final climate change compounds
compounds <- scan("thesis/implementation/Python/files/wordlist.txt", what="", sep="\n")
# load corpus files
pro2022 = readRDS("corpora/pro2022.rds")
contra2022 = readRDS("corpora/contra2022.rds")
# load list of final climate change compounds
compounds <- scan("/thesis/implementation/Python/files/wordlist.txt", what="", sep="\n")
# load corpus files
pro2022 = readRDS("corpora/pro2022.rds")
contra2022 = readRDS("corpora/contra2022.rds")
# load list of final climate change compounds
compounds <- scan("/implementation/Python/files/wordlist.txt", what="", sep="\n")
# load corpus files
pro2022 = readRDS("corpora/pro2022.rds")
contra2022 = readRDS("corpora/contra2022.rds")
# load list of final climate change compounds
compounds <- scan("/Users/anna/Documents/uni/thesis/implementation/Python/files/wordlist.txt", what="", sep="\n")
# load list of final climate change compounds and word forms
compound_df <- read.csv("/Users/anna/Documents/uni/thesis/implementation/Python/files/compounds_info.csv", sep = ";", stringsAsFactors=FALSE)
# lower compounds and word forms
compounds <- tolower(compounds)
compound_df$original <- tolower(compound_df$original)
compound_df$compound_forms <- tolower(compound_df$compound_forms)
# load corpus files
pro2022 = readRDS("corpora/pro2022.rds")
contra2022 = readRDS("corpora/contra2022.rds")
# load list of final climate change compounds
compounds <- scan("files/wordlist.txt", what="", sep="\n")
# load list of final climate change compounds and word forms
compound_df <- read.csv("files/compounds.csv", sep = ";", stringsAsFactors=FALSE)
# lower compounds and word forms
compounds <- tolower(compounds)
compound_df$original <- tolower(compound_df$original)
compound_df$compound_forms <- tolower(compound_df$compound_forms)
getwd()
compounds
compound_df
# retrieve frequency table of dfm
freqs_pro <- textstat_frequency(dfm_p2022, force=TRUE)
freqs_con <- textstat_frequency(dfm_c2022, force=TRUE)
# capitalize first letter of compound
freqs_pro$feature <- str_to_title(freqs_pro$feature)
freqs_con$feature <- str_to_title(freqs_con$feature)
# apply normalization
freqs_pro$normalize = round(normalize(freqs_pro$frequency),3)
freqs_con$normalize = round(normalize(freqs_con$frequency),3)
# plot comparison of both groups
freqs.act <- filter(freqs_pro) %>% as.data.frame() %>% select(feature, normalize)
freqs.scept <- filter(freqs_con) %>% as.data.frame() %>% select(feature, normalize)
freqs <- left_join(freqs.act, freqs.scept, by = "feature") %>% head(50) %>% arrange(normalize.x) %>% mutate(feature = factor(feature, feature))
# create plot
plot8 <- ggplot(freqs) +
geom_segment(aes(x=feature, xend=feature, y=normalize.x, yend=normalize.y), color="grey") +
geom_point(aes(x=feature, y=normalize.x, colour="Activists"), size = 3) +
geom_point(aes(x=feature, y=normalize.y, colour="Skeptics"), size = 3) +
ggtitle("Comparison TF-IDF Scores per Subdiscourse") +
xlab("") + ylab("TF-IDF") +
coord_flip()
plot8+labs(colour="Group")
# save to png
#ggsave("/Users/anna/Documents/uni/thesis/plots/comparison_tfidf.png", dpi=300, dev='png', height=10, width=15, units="in")
dfm_complete_df
dfm_complete_df$doc_id
dfm_complete_freq
dfm_complete_freq$features
dfm_toupper(dfm_complete_freq)
# create dfm with frequencies per group
dfm_complete_freq <- dfm(complete) %>%
dfm_keep(pattern = compounds) %>% # only keep compound words
dfm_group(groups = group) %>% # keep groups "activists" and "skeptics"
dfm_toupper()
set.seed(132) # set seed for reproducibility
textplot_wordcloud(dfm_complete_freq, comparison = TRUE, max_words = 250) # plot wordcloud
#write.csv(dfm_complete_df,"../output/tf_complete.csv", row.names = TRUE)
set.seed(27) # set seed for reproducibility
textplot_wordcloud(dfm_complete_freq, comparison = TRUE, max_words = 250) # plot wordcloud
dfm_complete_freq
sp_c2022_tokens <- tokens_replace(sp_c2022_tokens, pattern="klimaglaubenslehr", replacement="klimaglaubenslehre", valuetype = "fixed")
sp_c2022_tokens <- tokens_replace(sp_c2022_tokens, pattern="klimakarawan", replacement="klimakarawane", valuetype = "fixed")
sp_c2022_tokens <- tokens_replace(sp_c2022_tokens, pattern="klimazeug", replacement="klimazeugs", valuetype = "fixed")
sp_c2022_tokens <- tokens_replace(sp_c2022_tokens, pattern="klimawendehal", replacement="klimawendehals", valuetype = "fixed")
sp_p2022_tokens <- tokens_replace(sp_p2022_tokens, pattern="klimaglaubenslehr", replacement="klimaglaubenslehre", valuetype = "fixed")
sp_p2022_tokens <- tokens_replace(sp_p2022_tokens, pattern="klimakarawan", replacement="klimakarawane", valuetype = "fixed")
sp_p2022_tokens <- tokens_replace(sp_p2022_tokens, pattern="klimazeug", replacement="klimazeugs", valuetype = "fixed")
sp_p2022_tokens <- tokens_replace(sp_p2022_tokens, pattern="klimawendehal", replacement="klimawendehals", valuetype = "fixed")
# use lemmatised tokens to re-create a corpus
# we need this step for the grouping of the frequencies
p2022_cleaned <- corpus(sapply(sp_p2022_tokens, paste, collapse = " "))
c2022_cleaned <- corpus(sapply(sp_c2022_tokens, paste, collapse = " "))
# create groups
p2022_cleaned$group <- "activists"
c2022_cleaned$group <- "skeptics"
# create a corpus containing both subdiscourses
complete = p2022_cleaned+c2022_cleaned
# create dfm with frequencies per group
dfm_complete_freq <- dfm(complete) %>%
dfm_keep(pattern = compounds) %>% # only keep compound words
dfm_group(groups = group) %>% # keep groups "activists" and "skeptics"
dfm_toupper()
set.seed(27) # set seed for reproducibility
textplot_wordcloud(dfm_complete_freq, comparison = TRUE, max_words = 250) # plot wordcloud
#write.csv(dfm_complete_df,"../output/tf_complete.csv", row.names = TRUE)
dfm_complete_freq
# retrieve frequency table of dfm
freqs_pro <- textstat_frequency(dfm_p2022, force=TRUE)
freqs_con <- textstat_frequency(dfm_c2022, force=TRUE)
# capitalize first letter of compound
freqs_pro$feature <- str_to_title(freqs_pro$feature)
freqs_con$feature <- str_to_title(freqs_con$feature)
# apply normalization
freqs_pro$normalize = round(normalize(freqs_pro$frequency),3)
freqs_con$normalize = round(normalize(freqs_con$frequency),3)
# plot comparison of both groups
freqs.act <- filter(freqs_pro) %>% as.data.frame() %>% select(feature, normalize)
freqs.scept <- filter(freqs_con) %>% as.data.frame() %>% select(feature, normalize)
freqs <- left_join(freqs.act, freqs.scept, by = "feature") %>% head(50) %>% arrange(normalize.x) %>% mutate(feature = factor(feature, feature))
# create plot
plot8 <- ggplot(freqs) +
geom_segment(aes(x=feature, xend=feature, y=normalize.x, yend=normalize.y), color="grey") +
geom_point(aes(x=feature, y=normalize.x, colour="Supporters"), size = 3) +
geom_point(aes(x=feature, y=normalize.y, colour="Skeptics"), size = 3) +
ggtitle("Comparison TF-IDF Scores per Subdiscourse") +
xlab("") + ylab("TF-IDF") +
coord_flip()
plot8+labs(colour="Group")
# save to png
ggsave("/Users/anna/Documents/uni/thesis/plots/comparison_tfidf.png", dpi=300, dev='png', height=10, width=15, units="in")
# use lemmatised tokens to re-create a corpus
# we need this step for the grouping of the frequencies
p2022_cleaned <- corpus(sapply(sp_p2022_tokens, paste, collapse = " "))
c2022_cleaned <- corpus(sapply(sp_c2022_tokens, paste, collapse = " "))
# create groups
p2022_cleaned$group <- "Supporters"
c2022_cleaned$group <- "Skeptics"
# create a corpus containing both subdiscourses
complete = p2022_cleaned+c2022_cleaned
# create dfm with frequencies per group
dfm_complete_freq <- dfm(complete) %>%
dfm_keep(pattern = compounds) %>% # only keep compound words
dfm_group(groups = group) %>% # keep groups "activists" and "skeptics"
dfm_toupper()
set.seed(27) # set seed for reproducibility
textplot_wordcloud(dfm_complete_freq, comparison = TRUE, max_words = 250) # plot wordcloud
#write.csv(dfm_complete_df,"../output/tf_complete.csv", row.names = TRUE)
# create dfm with frequencies per group
dfm_complete_freq <- dfm(complete) %>%
dfm_keep(pattern = compounds) %>% # only keep compound words
dfm_group(groups = group) %>% # keep groups "activists" and "skeptics"
dfm_toupper()
set.seed(27) # set seed for reproducibility
textplot_wordcloud(dfm_complete_freq, comparison = TRUE, max_words = 250) # plot wordcloud
#ggsave("/Users/anna/Documents/uni/thesis/plots/wordcloud.png", dpi=300, dev='png', height=10, width=15, units="in")
ggsave("/Users/anna/Documents/uni/thesis/plots/wordcloud.png", dpi=300, dev='png', height=10, width=15, units="in")
textplot_wordcloud(dfm_complete_freq, comparison = TRUE, max_words = 250) # plot wordcloud
textplot_wordcloud(dfm_complete_freq, comparison = TRUE, max_words = 250) # plot wordcloud
textplot_wordcloud(dfm_complete_freq, comparison = TRUE, max_words = 250) # plot wordcloud
set.seed(11) # set seed for reproducibility
textplot_wordcloud(dfm_complete_freq, comparison = TRUE, max_words = 250)
set.seed(1) # set seed for reproducibility
textplot_wordcloud(dfm_complete_freq, comparison = TRUE, max_words = 250) # plot wordcloud
set.seed(2) # set seed for reproducibility
textplot_wordcloud(dfm_complete_freq, comparison = TRUE, max_words = 250) # plot wordcloud
textplot_wordcloud(dfm_complete_freq, comparison = TRUE, max_words = 250) # plot wordcloud
set.seed(3) # set seed for reproducibility
textplot_wordcloud(dfm_complete_freq, comparison = TRUE, max_words = 250) # plot wordcloud
textplot_wordcloud(dfm_complete_freq, comparison = TRUE, max_words = 250) # plot wordcloud
# retrieve frequency table of dfm
freqs_pro <- textstat_frequency(dfm_p2022, force=TRUE)
freqs_con <- textstat_frequency(dfm_c2022, force=TRUE)
# capitalize first letter of compound
freqs_pro$feature <- str_to_title(freqs_pro$feature)
freqs_con$feature <- str_to_title(freqs_con$feature)
# apply normalization
freqs_pro$normalize = round(normalize(freqs_pro$frequency),3)
freqs_con$normalize = round(normalize(freqs_con$frequency),3)
# plot comparison of both groups
freqs.act <- filter(freqs_pro) %>% as.data.frame() %>% select(feature, normalize)
freqs.scept <- filter(freqs_con) %>% as.data.frame() %>% select(feature, normalize)
freqs <- left_join(freqs.act, freqs.scept, by = "feature") %>% head(30) %>% arrange(normalize.x) %>% mutate(feature = factor(feature, feature))
# create plot
plot8 <- ggplot(freqs) +
geom_segment(aes(x=feature, xend=feature, y=normalize.x, yend=normalize.y), color="grey") +
geom_point(aes(x=feature, y=normalize.x, colour="Supporters"), size = 3) +
geom_point(aes(x=feature, y=normalize.y, colour="Skeptics"), size = 3) +
ggtitle("Comparison TF-IDF Scores per Subdiscourse") +
xlab("") + ylab("TF-IDF") +
coord_flip()
plot8+labs(colour="Group")
# save to png
ggsave("/Users/anna/Documents/uni/thesis/plots/comparison_tfidf.png", dpi=300, dev='png', height=10, width=15, units="in")
# retrieve frequency table of dfm
freqs_pro <- textstat_frequency(dfm_p2022, force=TRUE)
freqs_con <- textstat_frequency(dfm_c2022, force=TRUE)
# capitalize first letter of compound
freqs_pro$feature <- str_to_title(freqs_pro$feature)
freqs_con$feature <- str_to_title(freqs_con$feature)
# apply normalization
freqs_pro$normalize = round(normalize(freqs_pro$frequency),3)
freqs_con$normalize = round(normalize(freqs_con$frequency),3)
# plot comparison of both groups
freqs.act <- filter(freqs_pro) %>% as.data.frame() %>% select(feature, normalize)
freqs.scept <- filter(freqs_con) %>% as.data.frame() %>% select(feature, normalize)
freqs <- left_join(freqs.act, freqs.scept, by = "feature") %>% head(30) %>% arrange(normalize.x) %>% mutate(feature = factor(feature, feature))
# create plot
plot8 <- ggplot(freqs) +
geom_segment(aes(x=feature, xend=feature, y=normalize.x, yend=normalize.y), color="grey") +
geom_point(aes(x=feature, y=normalize.x, colour="Supporters"), size = 3) +
geom_point(aes(x=feature, y=normalize.y, colour="Skeptics"), size = 3) +
ggtitle("Comparison TF-IDF Scores per Subdiscourse") +
xlab("") + ylab("TF-IDF") +
coord_flip()
plot8+labs(colour="Group")
# save to png
#ggsave("/Users/anna/Documents/uni/thesis/plots/comparison_tfidf.png", dpi=300, dev='png', height=10, width=15, units="in")
# save to png
ggsave("/Users/anna/Documents/uni/thesis/plots/comparison_tfidf.png", dpi=300, dev='png', height=8, width=12, units="in")
# save to png
ggsave("/Users/anna/Documents/uni/thesis/plots/comparison_tfidf.png", dpi=300, dev='png', height=6, width=11, units="in")
# create plot
plot8 <- ggplot(freqs) +
geom_segment(aes(x=feature, xend=feature, y=normalize.x, yend=normalize.y), color="grey") +
geom_point(aes(x=feature, y=normalize.x, colour="Supporters"), size = 3) +
geom_point(aes(x=feature, y=normalize.y, colour="Skeptics"), size = 3) +
ggtitle("Comparison TF-IDF Scores per Sub Discourse") +
xlab("") + ylab("TF-IDF") +
coord_flip()
plot8+labs(colour="Group")
plot8+labs(colour="Group")
# save to png
ggsave("/Users/anna/Documents/uni/thesis/plots/comparison_tfidf.png", dpi=300, dev='png', height=6, width=11, units="in")
# retrieve frequency table of dfm
freqs_pro <- textstat_frequency(dfm_p2022, force=TRUE)
freqs_con <- textstat_frequency(dfm_c2022, force=TRUE)
# capitalize first letter of compound
freqs_pro$feature <- str_to_title(freqs_pro$feature)
freqs_con$feature <- str_to_title(freqs_con$feature)
# apply normalization
freqs_pro$normalize = round(normalize(freqs_pro$frequency),3)
freqs_con$normalize = round(normalize(freqs_con$frequency),3)
# plot comparison of both groups
freqs.act <- filter(freqs_pro) %>% as.data.frame() %>% select(feature, normalize)
freqs.scept <- filter(freqs_con) %>% as.data.frame() %>% select(feature, normalize)
freqs <- left_join(freqs.act, freqs.scept, by = "feature") %>% head(30) %>% arrange(normalize.x) %>% mutate(feature = factor(feature, feature))
# create plot
plot8 <- ggplot(freqs) +
geom_segment(aes(x=feature, xend=feature, y=normalize.x, yend=normalize.y), color="grey") +
geom_point(aes(x=feature, y=normalize.x, colour="Supporters"), size = 3) +
geom_point(aes(x=feature, y=normalize.y, colour="Skeptics"), size = 3) +
ggtitle("Comparison TF-IDF Scores per Sub Discourse") +
xlab("") + ylab("TF-IDF") +
coord_flip()
plot8+labs(colour="Group")
# save to png
#ggsave("/Users/anna/Documents/uni/thesis/plots/comparison_tfidf.png", dpi=300, dev='png', height=6, width=11, units="in")
